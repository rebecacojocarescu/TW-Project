CREATE TABLE user_notifications (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER NOT NULL,
    message VARCHAR2(500) NOT NULL,
    notification_type VARCHAR2(50) NOT NULL,
    is_read NUMBER(1) DEFAULT 0,
    created_at DATE DEFAULT SYSDATE,
    related_pet_id NUMBER,
    related_form_id NUMBER,
    CONSTRAINT fk_notification_user FOREIGN KEY (user_id) REFERENCES users(id),
    CONSTRAINT fk_notification_pet FOREIGN KEY (related_pet_id) REFERENCES pets(id)
);

CREATE OR REPLACE TRIGGER adoption_notifications
AFTER INSERT OR UPDATE ON adoption_form
FOR EACH ROW
DECLARE
    v_pet_owner_id NUMBER;
    v_pet_name VARCHAR2(100);
    v_applicant_name VARCHAR2(200);
BEGIN
    SELECT p.owner_id, p.name, u.name || ' ' || u.surname
    INTO v_pet_owner_id, v_pet_name, v_applicant_name
    FROM pets p
    JOIN users u ON u.id = :NEW.user_id
    WHERE p.id = :NEW.pet_id;

    IF INSERTING THEN
        INSERT INTO user_notifications (
            user_id,
            message,
            notification_type,
            related_pet_id,
            related_form_id
        ) VALUES (
            v_pet_owner_id,
            'New adoption request for ' || v_pet_name || ' from ' || v_applicant_name,
            'new_request',
            :NEW.pet_id,
            :NEW.id
        );
    END IF;

    IF UPDATING AND :OLD.status != :NEW.status THEN
        INSERT INTO user_notifications (
            user_id,
            message,
            notification_type,
            related_pet_id,
            related_form_id
        ) VALUES (
            :NEW.user_id,
            'Your adoption request for ' || v_pet_name || ' has been ' || 
            LOWER(:NEW.status),
            'status_update',
            :NEW.pet_id,
            :NEW.id
        );
    END IF;
END;
/
